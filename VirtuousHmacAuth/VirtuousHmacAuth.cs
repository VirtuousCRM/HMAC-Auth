using System;
using System.Configuration;
using System.Security.Cryptography;

namespace VirtuousHmacAuth
{
    public class VirtuousHmacAuth
    {
        /// <summary>
        /// The Virtuous Api base endpoint.
        /// </summary>
        private string _virtuousApi;

        /// <summary>
        /// The Private Api Key generated by Virtuous used to sign the request.
        /// </summary>
        private string _apiKey;

        /// <summary>
        /// The epoch start
        /// </summary>
        private DateTime _epochStart = new DateTime(1970, 01, 01, 0, 0, 0, 0, DateTimeKind.Utc);

        /// <summary>
        /// Initializes a new instance of the <see cref="VirtuousHmacAuth"/> class.
        /// </summary>
        public VirtuousHmacAuth()
        {
            _apiKey = ConfigurationManager.AppSettings["VIRTUOUS_API_KEY"];
            _virtuousApi = ConfigurationManager.AppSettings["VIRTUOUS_API"];
        }

        /// <summary>
        /// Generates the hmac header.
        /// </summary>
        /// <param name="requestHttpMethod">The request HTTP method.</param>
        /// <param name="requestUrl">The request URL.</param>
        /// <returns></returns>
        public string GenerateHmacHeader(string applicationKey, string requestHttpMethod, string requestUrl)
        {
            //url encode the request url
            string requestUriEncoded = System.Net.WebUtility.UrlEncode(string.Format("{0}{1}", _virtuousApi, requestUrl).ToLower());

            //generate a nonce for this request
            string nonce = Guid.NewGuid().ToString();

            //calculate time from epoch to now and generate timestamp
            TimeSpan timeSpan = DateTime.UtcNow - _epochStart;
            string requestTimeStamp = Convert.ToUInt64(timeSpan.TotalSeconds).ToString();

            //append the elements together to sign
            string data = string.Format("{0}{1}{2}{3}{4}",
                applicationKey,
                requestUriEncoded,
                requestHttpMethod,
                nonce,
                requestTimeStamp).ToLower();

            var apiKeyInBytes = Convert.FromBase64String(this._apiKey);
            using (HMACSHA256 hmac = new HMACSHA256(apiKeyInBytes))
            {
                //sign the request using the hmac signature
                byte[] signature = System.Text.Encoding.UTF8.GetBytes(data);
                byte[] signatureHashed = hmac.ComputeHash(signature);
                string generatedBase64Signature = Convert.ToBase64String(signatureHashed);

                //build the Authorization Header to use for the signed request
                var header = string.Format("Hmac {0}:{1}:{2}:{3}", applicationKey, generatedBase64Signature, nonce, requestTimeStamp);
                return header;
            }
        }
    }
}
